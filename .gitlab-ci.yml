stages:
- build
- test
- package
- upload
- release

variables:
  PACKAGE_VERSION: '${CI_COMMIT_REF_SLUG}'
  PACKAGE_NAME: 'GraphicsRulesMaker'
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}"
  DEPLOY_DIR: '${CI_PROJECT_DIR}/images'

.build-ubuntu: &build-ubuntu
  image: haffmans/cmake-qt5:${UBUNTU_VERSION}
  artifacts:
    paths:
    - build/ubuntu-${UBUNTU_VERSION}/${LOWER_BUILD_TYPE}
    expire_in: 30 days
  script:
  - mkdir -p build/ubuntu-${UBUNTU_VERSION}/${LOWER_BUILD_TYPE}
  - cd build/ubuntu-${UBUNTU_VERSION}/${LOWER_BUILD_TYPE}
  - cmake
    -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    -DCMAKE_INSTALL_PREFIX=/usr
    -DGraphicsRulesMaker_GIT_VERSION="$([ -z ${CI_COMMIT_TAG} ] && echo ${CI_COMMIT_SHORT_SHA})"
    ${CI_PROJECT_DIR}
  - make -j4
  stage: build

.build-windows: &build-windows
  image: haffmans/mingw-qt5:qt5
  artifacts:
    paths:
    - build/win32/${LOWER_BUILD_TYPE}
    expire_in: 30 days
  script:
  - mkdir -p build/${ARCH}/${LOWER_BUILD_TYPE}
  - cd build/${ARCH}/${LOWER_BUILD_TYPE}
  - ${TOOLCHAIN}-cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    -DCMAKE_TOOLCHAIN_FILE=/usr/share/mingw/toolchain-${TOOLCHAIN}.cmake
    -DImageMagick_convert_EXECUTABLE=/usr/bin/convert
    -DGraphicsRulesMaker_GIT_VERSION="$([ -z ${CI_COMMIT_TAG} ] && echo ${CI_COMMIT_SHORT_SHA})"
    -DCPACK_OUTPUT_FILE_PREFIX=${DEPLOYTARGET}
    -DCPACK_PACKAGE_VERSION=${PACKAGE_VERSION}
    ${CI_PROJECT_DIR}
  - make -j4
  stage: build

.mingw-w32-vars: &mingw-w32-vars
  TOOLCHAIN: 'i686-w64-mingw32'
  ARCH: 'win32'
  DEPLOYTARGET: '${DEPLOY_DIR}/${ARCH}/'
  PACKNAME: "${PACKAGE_NAME}-${PACKAGE_VERSION}-${ARCH}"

.mingw-w64-vars: &mingw-w64-vars
  TOOLCHAIN: 'x86_64-w64-mingw32'
  ARCH: 'win64'
  DEPLOYTARGET: '${DEPLOY_DIR}/${ARCH}/'
  PACKNAME: "${PACKAGE_NAME}-${PACKAGE_VERSION}-${ARCH}"

.ubuntu-vars: &ubuntu-vars
  DEPLOYTARGET: '${DEPLOY_DIR}/linux/'
  PACKNAME: '${PACKAGE_NAME}-${PACKAGE_VERSION}'

.src-vars: &src-vars
  DEPLOYTARGET: '${DEPLOY_DIR}/src/'
  PACKNAME: '${PACKAGE_NAME}-${PACKAGE_VERSION}'

build:ubuntu-18.04:debug:
  <<: *build-ubuntu
  variables:
    UBUNTU_VERSION: '18.04'
    BUILD_TYPE: 'Debug'
    LOWER_BUILD_TYPE: 'debug'

build:ubuntu-18.04:release:
  <<: *build-ubuntu
  variables:
    UBUNTU_VERSION: '18.04'
    BUILD_TYPE: 'Release'
    LOWER_BUILD_TYPE: 'release'

build:win32:release:
  <<: *build-windows
  variables:
    <<: *mingw-w32-vars
    BUILD_TYPE: 'Release'
    LOWER_BUILD_TYPE: 'release'

build:win64:release:
  <<: *build-windows
  variables:
    <<: *mingw-w64-vars
    BUILD_TYPE: 'Release'
    LOWER_BUILD_TYPE: 'release'

package:ubuntu-18.04:
  image: haffmans/cmake-qt5:18.04
  artifacts:
    paths:
    - images
    expire_in: 30 days
  dependencies:
  - build:ubuntu-18.04:release
  variables:
    <<: *ubuntu-vars
  script:
  # Determine distribution name + release
  - if [ -f /etc/lsb-release ]; then
  -   '. /etc/lsb-release'
  -   DISTRIB_ID_LC=$(echo "$DISTRIB_ID" | tr "[:upper:]" "[:lower:]")
  -   DEPLOYTARGET="${CI_PROJECT_DIR}/images/${DISTRIB_ID_LC}/${DISTRIB_CODENAME}/"
  - fi

  # Install to temporary directory
  - cd build/ubuntu-18.04/release
  - mkdir -p "${CI_PROJECT_DIR}/package/ubuntu-18.04/${PACKNAME}"
  - make DESTDIR="${CI_PROJECT_DIR}/package/ubuntu-18.04/${PACKNAME}" install

  # Prepare target
  - cd "${CI_PROJECT_DIR}/package/ubuntu-18.04/${PACKNAME}"
  - mkdir -p "${DEPLOYTARGET}"

  # Create tar.gz and tar.bz2
  - echo "Creating ${DEPLOYTARGET}${PACKNAME}.tar.gz..."
  - tar -czpf "${DEPLOYTARGET}${PACKNAME}.tar.gz" *
  - echo "Creating ${DEPLOYTARGET}${PACKNAME}.tar.bz2..."
  - tar -cjpf "${DEPLOYTARGET}${PACKNAME}.tar.bz2" *

  # Creating checksums
  - cd "${DEPLOYTARGET}"
  - md5sum "${PACKNAME}.tar.gz" > "${PACKNAME}.tar.gz.md5"
  - sha1sum "${PACKNAME}.tar.gz" > "${PACKNAME}.tar.gz.sha1"
  - md5sum "${PACKNAME}.tar.bz2" > "${PACKNAME}.tar.bz2.md5"
  - sha1sum "${PACKNAME}.tar.bz2" > "${PACKNAME}.tar.bz2.sha1"
  stage: package

package:src:
  image: haffmans/cmake-qt5:18.04
  artifacts:
    paths:
    - images
    expire_in: 30 days
  variables:
    <<: *src-vars
  script:
  - mkdir -p "DEPLOYTARGET"

  - echo "Creating ${DEPLOYTARGET}${PACKNAME}.src.tar.gz..."
  - git archive --prefix=${PACKNAME}/ ${CI_COMMIT_SHA} | gzip > "${DEPLOYTARGET}${PACKNAME}.src.tar.gz"

  - echo "Creating ${DEPLOYTARGET}${PACKNAME}.src.tar.bz2..."
  - git archive --prefix=${PACKNAME}/ ${CI_COMMIT_SHA} | bzip2 > "${DEPLOYTARGET}${PACKNAME}.src.tar.bz2"

  # Creating checksums
  - cd "${DEPLOYTARGET}"
  - md5sum "${PACKNAME}.src.tar.gz" > "${PACKNAME}.src.tar.gz.md5"
  - sha1sum "${PACKNAME}.src.tar.gz" > "${PACKNAME}.src.tar.gz.sha1"
  - md5sum "${PACKNAME}.src.tar.bz2" > "${PACKNAME}.src.tar.bz2.md5"
  - sha1sum "${PACKNAME}.src.tar.bz2" > "${PACKNAME}.src.tar.bz2.sha1"
  stage: package

.package-windows: &package-windows
  image: haffmans/mingw-qt5:qt5
  artifacts:
    paths:
    - images
    expire_in: 30 days
  script:
  - cd build/${ARCH}/release
  - cpack -DCPACK_OUTPUT_FILE_PREFIX=${DEPLOYTARGET} -DCPACK_PACKAGE_VERSION=${PACKAGE_VERSION}

  # Creating checksums
  - cd "${DEPLOYTARGET}"
  - md5sum "${PACKNAME}.exe" > "${PACKNAME}.exe.md5"
  - sha1sum "${PACKNAME}.exe" > "${PACKNAME}.exe.sha1"
  - md5sum "${PACKNAME}.zip" > "${PACKNAME}.zip.md5"
  - sha1sum "${PACKNAME}.zip" > "${PACKNAME}.zip.sha1"
  stage: package

package:win32:
  <<: *package-windows
  dependencies:
  - build:win32:release
  variables:
    <<: *mingw-w32-vars

package:win64:
  <<: *package-windows
  dependencies:
  - build:win64:release
  variables:
    <<: *mingw-w64-vars

upload:
  stage: upload
  image: curlimages/curl:latest
  dependencies:
  - package:ubuntu-18.04
  - package:win32
  - package:win64
  rules:
  - if: $CI_COMMIT_TAG
  script:
  # Note: these uploads rely on e.g. specific Ubuntu version knowledge and filename details.
  # This skips the sha1 checksum files. Source packages are created by Gitlab itself, so excluded too.
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win32/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe     "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win32/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe.md5 "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe.md5"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win64/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe     "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win64/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe.md5 "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe.md5"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win32/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip     "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win32/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip.md5 "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip.md5"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win64/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip     "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/win64/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip.md5 "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip.md5"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/ubuntu/bionic/${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz      "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.gz"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/ubuntu/bionic/${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.gz.md5  "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.gz.md5"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/ubuntu/bionic/${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.bz2     "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.bz2"'
  - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${DEPLOY_DIR}/ubuntu/bionic/${PACKAGE_NAME}-${PACKAGE_VERSION}.tar.bz2.md5 "${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.bz2.md5"'

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
  - if: $CI_COMMIT_TAG
  dependencies:
  - upload
  script:
  - |
    release-cli create --name "Release ${PACKAGE_VERSION}" --tag-name "${CI_COMMIT_TAG}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe.md5\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.exe.md5\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe.md5\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.exe.md5\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip.md5\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win32.zip.md5\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip.md5\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-win64.zip.md5\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.gz\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.gz.md5\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.gz.md5\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.bz2\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.bz2\"}" \
      --assets-link "{\"name\":\"${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.bz2.md5\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_NAME}-${PACKAGE_VERSION}-ubuntu-bionic.tar.bz2.md5\"}"
